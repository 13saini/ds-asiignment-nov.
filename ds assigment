{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "acedfa52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original array:\n",
      "[11, 56, 77, 89, 99]\n",
      "\n",
      "Array to a height balanced BST:\n",
      "77\n",
      "56\n",
      "11\n",
      "99\n",
      "89\n",
      "None\n",
      "Deleting the last element from array- [11, 56, 77, 89]\n",
      "Original node:\n",
      "11\n",
      "56\n",
      "89\n",
      "99\n",
      "77\n",
      "None\n",
      "After deleting specified node:\n",
      "11\n",
      "56\n",
      "89\n",
      "99\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#sorted array to binary search tree\n",
    "class Node1(object):\n",
    "    def __init__(self, key):\n",
    "        self.key = key\n",
    "        self.left = None\n",
    "        self.right = None\n",
    "\n",
    "def arraytobst(arraynums):\n",
    "    if not arraynums:\n",
    "        return None\n",
    "    mid = len(arraynums)//2\n",
    "    node = Node1(arraynums[mid])\n",
    "    node.left = arraytobst(arraynums[:mid])\n",
    "    node.right = arraytobst(arraynums[mid+1:])\n",
    "    return node\n",
    "\n",
    "def preOrder(node): \n",
    "    if not node: \n",
    "        return      \n",
    "    print(node.key)\n",
    "    preOrder(node.left) \n",
    "    preOrder(node.right)   \n",
    "\n",
    "arraynums = [11,56,77,89,99]\n",
    "\n",
    "print(\"Original array:\")\n",
    "print(arraynums)\n",
    "result = arraytobst(arraynums)\n",
    "print(\"\\nArray to a height balanced BST:\")\n",
    "print(preOrder(result))\n",
    "\n",
    "#deleting an element from array\n",
    "arraynums.pop()\n",
    "print(\"Deleting the last element from array-\",arraynums)\n",
    "#deleting element from BST\n",
    "class TreeNode(object):\n",
    "    def __init__(self, x):\n",
    "         self.val = x\n",
    "         self.left = None\n",
    "         self.right = None\n",
    "\n",
    "def delete_Node(root, key):\n",
    "  # if root doesn't exist, just return it\n",
    "\tif not root: \n",
    "\t\treturn root\n",
    "\t# Find the node in the left subtree\tif key value is less than root value\n",
    "\tif root.val > key: \n",
    "\t\troot.left = delete_Node(root.left, key)\n",
    "\t# Find the node in right subtree if key value is greater than root value, \n",
    "\telif root.val < key: \n",
    "\t\troot.right= delete_Node(root.right, key)\n",
    "\t# Delete the node if root.value == key\n",
    "\telse: \n",
    "\t# If there is no right children delete the node and new root would be root.left\n",
    "\t\tif not root.right:\n",
    "\t\t\treturn root.left\n",
    "\t# If there is no left children delete the node and new root would be root.right\t\n",
    "\t\tif not root.left:\n",
    "\t\t\treturn root.right\n",
    "  # If both left and right children exist in the node replace its value with \n",
    "  # the minmimum value in the right subtree. Now delete that minimum node\n",
    "  # in the right subtree\n",
    "\t\ttemp_val = root.right\n",
    "\t\tmini_val = temp_val.val\n",
    "\t\twhile temp_val.left:\n",
    "\t\t\ttemp_val = temp_val.left\n",
    "\t\t\tmini_val = temp_val.val\n",
    "  # Delete the minimum node in right subtree\n",
    "\t\troot.right = deleteNode(root.right,root.val)\n",
    "\treturn root\n",
    "\n",
    "def preOrder(node): \n",
    "    if not node: \n",
    "        return      \n",
    "    print(node.val)\n",
    "    preOrder(node.left) \n",
    "    preOrder(node.right)   \n",
    "    \n",
    "root = TreeNode(11)  \n",
    "root.left = TreeNode(56)  \n",
    "root.right = TreeNode(77) \n",
    "root.left.left = TreeNode(89)  \n",
    "root.left.right = TreeNode(99)  \n",
    "print(\"Original node:\")\n",
    "print(preOrder(root))\n",
    "result = delete_Node(root, 77)\n",
    "print(\"After deleting specified node:\")\n",
    "print(preOrder(result))\n",
    "\n",
    "#1. deleting an element fom an array \n",
    "#space complexity is O(1)\n",
    "    \n",
    "#2. deleting an node from BST\n",
    " #  The space complexity of a binary search tree is O(1)\n",
    " #  in both the average and the worst cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a3c5c46",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34183a28",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab99d297",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
